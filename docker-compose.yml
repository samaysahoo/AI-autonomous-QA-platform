version: '3.8'

services:
  # AI Test Automation Platform
  ai-test-platform:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///./data/test_automation.db
      - REDIS_URL=redis://redis:6379/0
      - CHROMA_PERSIST_DIRECTORY=./data/chroma_db
      - FAISS_INDEX_PATH=./data/faiss_index
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./screenshots:/app/screenshots
      - ./test_results:/app/test_results
    depends_on:
      - redis
      - temporal
    networks:
      - ai-test-network
    restart: unless-stopped

  # Redis for caching and task queues
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-test-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Temporal for workflow orchestration
  temporal:
    image: temporalio/auto-setup:1.20
    ports:
      - "7233:7233"
      - "8080:8080"
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
    depends_on:
      - postgresql
    networks:
      - ai-test-network
    restart: unless-stopped

  # PostgreSQL for Temporal
  postgresql:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=temporal
      - POSTGRES_USER=temporal
      - POSTGRES_PASSWORD=temporal
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ai-test-network
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ai-test-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - ai-test-network
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - ai-test-platform
    networks:
      - ai-test-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  ai-test-network:
    driver: bridge
